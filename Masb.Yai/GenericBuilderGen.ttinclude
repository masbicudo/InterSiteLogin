<#@ assembly name="System.Core" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Reflection" #>
<#@ import namespace="System.Text.RegularExpressions" #>
<#

ObjectNamespace = this.Host.ResolveParameterValue("directiveId", "namespaceDirectiveProcessor", "namespaceHint");

#>
//------------------------------------------------------------------------------
// <auto-generated>
//    This code was generated from a template.
//
//    Manual changes to this file may cause unexpected behavior in your application.
//    Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;<#+
	string ObjectNamespace { get; set; }

	string BaseTypeName { get; set; }
	string GenericTypeName { get; set; }
	string BuilderTypeName { get; set; }
	Constructor[] Constructors { get; set; }
	Parameter[] TypeParameters { get; set; }

	void RenderBody()
    {
		var typeParams = TypeParameters ?? new [] {
			new Parameter("T", "type"),
		};

		if (typeParams.Length == 0)
			throw new Exception("TypeParameters must have at least one entry.");

		var ctors = Constructors ?? new [] {
			new Constructor(),
		};

		if (ctors.Length == 0)
			throw new Exception("Constructors must have at least one entry.");

		if (!String.IsNullOrEmpty(ObjectNamespace))
		{
#>

namespace <#=ObjectNamespace#>
{
<#+
			PushIndent("    ");
		}

#>
public abstract class <#=BuilderTypeName#>
{
	// cannot derive this class from outside: constructor is private
    private <#=BuilderTypeName#>()
    {
    }

    private static <#=BuilderTypeName#> CreateBuilder(<#=GetArgsList(typeParams, "Type {Name}")#>)
    {
		// Activator.CreateInstance without parameters is very fast
		// MakeGenericType is also very fast
        return (<#=BuilderTypeName#>)Activator.CreateInstance(
			typeof(Generic<<#=GetArgsList(typeParams, "", ",")#>>)
				.MakeGenericType(<#=GetArgsList(typeParams, "{Name}")#>));
    }

<#+
		foreach (var ctor in ctors)
		{
			var ctorParams = ctor.Parameters ?? new Parameter[0];
#>
    protected abstract <#=BaseTypeName#> Create(<#=GetArgsList(ctorParams)#>);

    public static <#=BaseTypeName#> Create(<#=GetArgsList(typeParams.Select(
			x => new Parameter("Type", x.Name)).Concat(ctorParams))#>)
    {
        var builder = CreateBuilder(<#=GetArgsList(typeParams, "{Name}")#>);
        return builder.Create(<#=GetArgsList(ctorParams, "{RefOut }{Name}")#>);
    }
<#+
		}
#>

    private class Generic<<#=GetArgsList(typeParams, "{TypeName}")#>> : <#=BuilderTypeName#>
    {
<#+
		foreach (var ctor in ctors)
		{
#>
        protected override <#=BaseTypeName#> Create(<#=GetArgsList(ctor.Parameters)#>)
        {
            return new <#=GenericTypeName#><<#=GetArgsList(typeParams, "{TypeName}")#>>(
				<#=GetArgsList(ctor.Parameters, "{RefOut }{CastExpression}{Name}")#>);
        }
<#+
		}
#>
    }
}
<#+

		if (!String.IsNullOrEmpty(ObjectNamespace))
		{
			PopIndent();
#>
}
<#+
		}
    }

	static string GetArgsList(IEnumerable<Parameter> parameters, string format = "{RefOut }{TypeName} {Name}", string separator = ", ")
	{
		if (parameters == null) return "";
		return string.Join(separator, parameters.Select(x => x.Format(format)));
    }

	class Parameter
	{
		public Parameter(string typeName, string name, string[] attributes = null, string defaultValue = null, string castExpression = null)
		{
			this.TypeName = typeName;
			this.Name = name;
			this.Attributes = attributes;
			this.DefaultValue = defaultValue;
			this.CastExpression = castExpression;
		}

		public string TypeName { get; private set; }
		public string Name { get; private set; }

		/// <summary> Type cast when using the parameter. <para>Examples: "(object)", "(int?)", "(float)(int)"</para> </summary>
		public string CastExpression { get; private set; }

		/// <summary> Atributes to place before type when declaring. <para>Examples: "this", "in", "out", "ref", "[Attrib]"</para> </summary>
		public string[] Attributes { get; private set; }

		/// <summary> Default value of the parameter. <para>Examples: "10", "'a'", @"""Miguel""", "null"</para> </summary>
		public string DefaultValue { get; private set; }

		public string Declaration
        {
			get
			{
				string result = null;
				if (this.Attributes != null && this.Attributes.Length > 0) result += string.Join(" ", this.Attributes) + ' ';
				result += this.TypeName + ' ' + this.Name;
				if (!string.IsNullOrEmpty(this.DefaultValue)) result += " = " + this.DefaultValue;
				return result;
			}
        }

		public string RefOut
        {
			get { return (this.Attributes ?? new string[0]).Where(x => x == "ref" || x == "out").FirstOrDefault(); }
        }

		public string Format(string format)
        {
            var result = Regex.Replace(
               format,
               @"\{(\s*)([^\}]*?)(\s*)\}",
               m =>
				{
					var val = (string)typeof(Parameter)
					   .GetProperty(
						   m.Groups[2].Value,
						   BindingFlags.Instance | BindingFlags.Public | BindingFlags.NonPublic)
						   .GetValue(this, null);

					return string.IsNullOrEmpty(val) ? "" : (m.Groups[1].Value + val + m.Groups[3].Value);
				});

			return result;
        }
	}

	class Constructor
	{
		public Constructor() { }
		public Constructor(Parameter[] parameters) { this.Parameters = parameters; }
		public Parameter[] Parameters { get; private set; }
	}
#>