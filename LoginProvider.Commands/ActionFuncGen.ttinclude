<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Collections.Generic" #>
<#

MaxArgs = 16;

ObjectNamespace = this.Host.ResolveParameterValue("directiveId", "namespaceDirectiveProcessor", "namespaceHint");

#>
//------------------------------------------------------------------------------
// <auto-generated>
//    This code was generated from a template.
//
//    Manual changes to this file may cause unexpected behavior in your application.
//    Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

<#

if (!String.IsNullOrEmpty(ObjectNamespace))
{
#>
namespace <#=ObjectNamespace#>
{
<#
    PushIndent("    ");
}

for (int it = 0; it <= MaxArgs; it++)
{
	Func<string, int, string> namer =
		it == 0 ? null :
		it == 1 ? (Func<string, int, string>)((s, i) => string.Format(s, "")) :
		(Func<string, int, string>)((s, i) => string.Format(s, i));

	if (it == 0)
	{
		if (HasReturn)
		{
#>
public <#=TypeKind#> <#=TypeName#><out TResult>
{
	TResult Execute();
}
<#
		}
		else
		{
#>
public <#=TypeKind#> <#=TypeName#>
{
	void Execute();
}
<#
		}
	}
	else
	{
		if (HasReturn)
		{
#>
public <#=TypeKind#> <#=TypeName#><<#=string.Join(", ", Enumerable.Range(1, it).Select(i => namer("in T{0}", i)))#>, out TResult>
{
	TResult Execute(<#=string.Join(", ", Enumerable.Range(1, it).Select(i => namer("T{0} arg{0}", i)))#>);
}
<#
		}
		else
		{
#>
public <#=TypeKind#> <#=TypeName#><<#=string.Join(", ", Enumerable.Range(1, it).Select(i => namer("in T{0}", i)))#>>
{
	void Execute(<#=string.Join(", ", Enumerable.Range(1, it).Select(i => namer("T{0} arg{0}", i)))#>);
}
<#
		}
	}
}

if (!String.IsNullOrEmpty(ObjectNamespace))
{
    PopIndent();
#>
}
<#
}
#>
<#+
	string ObjectNamespace { get; set; }
	int MaxArgs { get; set; }
	string TypeKind { get; set; }
	string TypeName { get; set; }
	bool HasReturn { get; set; }
#>